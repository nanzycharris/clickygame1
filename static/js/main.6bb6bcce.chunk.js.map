{"version":3,"sources":["components/GridMDC/GridMDC.js","components/PaperMDC/PaperMDC.js","components/CharCard/CharCard.js","components/Score/Score.js","components/Alert/Alert.js","components/NavBar/NavBar.js","App.js","registerServiceWorker.js","index.js"],"names":["GridMDC","props","Grid","children","PaperMDC","Paper","CharCard","id","name","image","handlePicked","className","key","data-id","style","backgroundImage","onClick","Score","type","score","Alert","message","NavBar","AppBar","position","Toolbar","Typography","variant","color","align","App","state","characters","pickedChars","topScore","alertMessage","event","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","setState","shuffleArray","a","j","x","i","length","Math","floor","random","cb","newState","includes","push","alertWinner","background","marginBottom","container","direction","margin","maxWidth","item","lg","this","justify","md","sm","xs","spacing","map","char","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6bb6bcce.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from '@material-ui/core/Grid';\n\nconst GridMDC = props =>\n    <Grid {...props}>\n        {props.children}\n    </Grid>\n\nexport default GridMDC;","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst PaperMDC = props => (\n    <Paper>\n        {props.children}\n    </Paper>\n)\n\nexport default PaperMDC;","import React from \"react\";\nimport \"./CharCard.css\";\n// import { url } from \"inspector\";\n\nconst CharCard = ({ id, name, image, handlePicked }) => (\n    <div>\n        <div\n            className=\"card\"\n            key={id}\n            data-id={id}\n            name={name}\n            style={{ backgroundImage: `url(${image})` }}\n            onClick={handlePicked}\n        >\n        </div>\n    </div>\n)\n\nexport default CharCard;\n","import React from \"react\";\nimport \"./Score.css\";\n\nconst Score = props => (\n    <div className=\"score\">\n        {props.type}: {props.score}\n    </div>\n)\n\nexport default Score;","import React from \"react\";\nimport \"./Alert.css\";\n\nconst Alert = props => (\n    <div className=\"default\" style={props.style}>\n        {props.message ? (\n            <p>{props.message}</p>\n        ) : (\n                <p className=\"default-msg black\">Click on an image to earn points, but don't click on any more than once!</p>\n            )}\n    </div>\n)\n\nexport default Alert;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = props => {\n    return (\n        <div>\n            <AppBar position=\"static\" {...props}>\n                <Toolbar>\n                    <Typography variant=\"headline\" color=\"inherit\" align=\"center\">\n                        The Simpsons Clicky Game\n                </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport GridMDC from \"./components/GridMDC\";\nimport PaperMDC from \"./components/PaperMDC\";\nimport CharCard from \"./components/CharCard\";\nimport Score from \"./components/Score\";\nimport Alert from \"./components/Alert\";\nimport NavBar from \"./components/NavBar\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    pickedChars: [],\n    topScore: 0,\n    alertMessage: \"\"\n  }\n\n  handlePicked = event => {\n\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shuffleCharacters()\n    this.checkGuess(name, this.updateTopScore)\n  }\n\n  shuffleCharacters = () => {\n    this.setState({ characters: this.shuffleArray(this.state.characters) })\n  }\n\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedChars.includes(name)) {\n      newState.alertMessage = `D'oh! You already picked ${name}!`\n      newState.pickedChars = []\n      this.setState(newState)\n    } else {\n      newState.pickedChars.push(name)\n      newState.alertMessage = `Hi-diddly-ho! Excellent choice!`\n      this.setState(newState)\n    }\n    cb(newState, this.alertWinner)\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedChars.length > newState.topScore) {\n      newState.topScore++\n      this.setState(newState)\n    }\n    cb(newState)\n  }\n\n  alertWinner = (newState) => {\n    if (newState.pickedChars.length === 12) {\n      newState.alertMessage = \"Winner!\";\n      newState.pickedChars = [];\n      this.setState(newState)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} />\n\n        <GridMDC container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945 }}>\n\n          <GridMDC item lg={12}>\n            <PaperMDC>\n              {this.state.alertMessage === \"Excellent choice!\" ? (\n                <Alert message={this.state.alertMessage} style={{ color: \"green\" }} />\n              ) : (\n                  <Alert message={this.state.alertMessage} style={{ color: \"red\" }} />\n                )}\n            </PaperMDC>\n          </GridMDC>\n\n          <GridMDC container justify=\"space-between\">\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Score\" score={this.state.pickedChars.length} />\n              </PaperMDC>\n            </GridMDC>\n\n            <GridMDC item lg={6} md={6} sm={12} xs={12}>\n              <PaperMDC>\n                <Score type=\"Top Score\" score={this.state.topScore} />\n              </PaperMDC>\n            </GridMDC>\n\n          </GridMDC>\n\n        </GridMDC>\n\n        <GridMDC container spacing={24} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\n          {this.state.characters.map(char => (\n            <GridMDC item lg={3} md={3} sm={4} xs={6}>\n              <CharCard\n                id={char.id}\n                name={char.name}\n                image={char.image}\n                key={char.id}\n                handlePicked={this.handlePicked}\n              />\n            </GridMDC>\n          ))}\n        </GridMDC>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '[::1]' ||\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available; please refresh.');\n            } else {\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl)\n    .then(response => {\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}